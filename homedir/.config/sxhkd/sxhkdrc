# cat << EOF > /dev/null
# Author: Marcus Bruno
# www.github.com/mrcsbrn/dotfiles
#
# wm independent hotkeys
#
# terminal emulator
super + Return
	urxvt
# program launcher
super + d
    rofi -show run -show-icons -matching fuzzy
# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# minhas hotkeys =====================================
super + shift + p
    cut -c3- $HOME/.config/sxhkd/sxhkdrc | sh -s _polybar_toggle
super + p
    cut -c3- $HOME/.config/sxhkd/sxhkdrc | sh -s _blink_window
super + shift + g
    cut -c3- $HOME/.config/sxhkd/sxhkdrc | sh -s _play_ytmpv
super + shift + a
    cut -c3- $HOME/.config/sxhkd/sxhkdrc | sh -s _toggle_audio_output
super + shift + x
    cut -c3- $HOME/.config/sxhkd/sxhkdrc | sh -s _simple_lock
super + Print
    cut -c3- $HOME/.config/sxhkd/sxhkdrc | sh -s _screenkey_toggle
# fullscreen toggle
super + {space,f}
    state={floating,fullscreen}; \
    bspc query -N -n "focused.$\{state\}" && state=tiled; \
    bspc node -t "$state"
# reload bspwmrc
super + shift + r
    bash ~/.config/bspwm/bspwmrc
# fim minhas hotkeys =================================
#
# bspwm hotkeys
#
# quit bspwm normally
super + shift + e
	bspc quit
# close and kill
super + q
	bspc node -k
# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next
# if the current node is automatic, send it to the last manual, otherwise pull the last leaf
super + y
	bspc query -N -n focused.automatic && bspc node -n last.!automatic || bspc node last.leaf -n focused
# swap the current node and the biggest node
super + g
	bspc node -s biggest
#
# state/flags
#
# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}
# set the node flags
super + ctrl + {x,y,z}
	bspc node -g {locked,sticky,private}
#
# focus/swap
#
# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}
# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}
# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local
# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local
# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last
# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on
# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'
#
# preselect
#
# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}
# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}
# cancel the preselection for the focused desktop
super + ctrl + space
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel
#
# move/resize
#
# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}
# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}
# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}


# =============================================================================
# EOF
# # cat << EOF > /dev/null # < devo colocar essa linha no topo!
#
# _blink_window(){
#   val=0.4
#   slp=0.1
#   num=2
#   for i in $(seq 1 $num); do
#       transset-df -a --dec $val && sleep $slp && transset-df -a --inc $val
#       sleep $slp
#   done
# }
#
# _xmanager(){
#   xdflts=$(realpath ~/.Xdefaults)
#   xrsrcs=$(realpath ~/.Xresources)
#   if [ -f $xdflts ]; then
#       xrdb -load $xdflts
#       echo "Xdefaults loaded"
#   fi
#   if [ -f $xrsrcs ]; then
#       xrdb -merge $xrsrcs
#       echo "Xresources merged"
#   fi
# }
#
# _polybar_launcher(){
#   killall -q polybar || true
#   polybar Bar -c $HOME/.config/i3/polybar/config -q &
# }
#
# _polybar_toggle(){
#   if pidof polybar >/dev/null; then
#       pkill -f polybar
#   else
#       polybar Bar -c $HOME/.config/i3/polybar/config -q &
#   fi
# }
#
# _compton_launcher(){
#   killall -q compton || true
#   sleep 0.2 && compton --config $HOME/.config/i3/compton.conf &
# }
#
# _toggle_audio_output(){
#   toggle_config=/tmp/.audio_output_toggle
#   if [[ ! -e "$toggle_config" ]]; then
#       # Muda pro audio hdmi
#       pacmd set-default-sink 0
#       for index in `pacmd list-sink-inputs | grep "^\s*index" | sed -e "s/[^0-9]//g"`; do
#           pacmd move-sink-input $index 0;
#       done
#       touch "$toggle_config"
#   else
#       # Muda pro audio do headphone
#       pacmd set-default-sink 1
#
#       for index in `pacmd list-sink-inputs | grep "^\s*index" | sed -e "s/[^0-9]//g"`; do
#           pacmd move-sink-input $index 1;
#       done
#       rm "$toggle_config"
#   fi
# }
#
# _simple_lock(){
#   if which betterlockscreen >/dev/null 2>&1; then
#       betterlockscreen -l dim
#   else
#       lock_img=~/.config/i3/nlock.png
#       imgpath=/tmp/i3screenshot.png
#       scrot --silent $imgpath
#       convert $imgpath -blur 0x3 $imgpath
#       if [[ -f $lock_img ]]; then
#           convert $imgpath $lock_img \
#               -gravity center -composite -matte \
#               $imgpath
#       fi
#       i3lock -i $imgpath && rm $imgpath
#   fi
# }
#
# _play_ytmpv(){
#   # preciso estar com o link copiado
#   if which xsel >/dev/null 2>&1; then
#       selectedtext=$(xsel -o -b)
#   elif which xclip >/dev/null 2>&1; then
#       selectedtext=$(xclip -o -selection clipboard)
#   else
#       echo "install xsel or xclip"
#       return 1
#   fi
#   tsp mpv --ontop --no-border --volume=50 --force-window --autofit=600x380 --geometry=-15-15 "$selectedtext"
# }
#
# _screenkey_toggle(){
#   if pgrep screenkey >/dev/null; then
#       pkill -f screenkey
#   else
#       screenkey
#   fi
# }
#
# # ======== o comando abaixo é necessário
# "$@"
